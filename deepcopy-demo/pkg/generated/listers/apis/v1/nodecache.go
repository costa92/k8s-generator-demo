/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/costa92/k8s-generator-demo/deepcopy-demo/pkg/apis/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodeCacheLister helps list NodeCaches.
// All objects returned here must be treated as read-only.
type NodeCacheLister interface {
	// List lists all NodeCaches in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NodeCache, err error)
	// NodeCaches returns an object that can list and get NodeCaches.
	NodeCaches(namespace string) NodeCacheNamespaceLister
	NodeCacheListerExpansion
}

// nodeCacheLister implements the NodeCacheLister interface.
type nodeCacheLister struct {
	indexer cache.Indexer
}

// NewNodeCacheLister returns a new NodeCacheLister.
func NewNodeCacheLister(indexer cache.Indexer) NodeCacheLister {
	return &nodeCacheLister{indexer: indexer}
}

// List lists all NodeCaches in the indexer.
func (s *nodeCacheLister) List(selector labels.Selector) (ret []*v1.NodeCache, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodeCache))
	})
	return ret, err
}

// NodeCaches returns an object that can list and get NodeCaches.
func (s *nodeCacheLister) NodeCaches(namespace string) NodeCacheNamespaceLister {
	return nodeCacheNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodeCacheNamespaceLister helps list and get NodeCaches.
// All objects returned here must be treated as read-only.
type NodeCacheNamespaceLister interface {
	// List lists all NodeCaches in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NodeCache, err error)
	// Get retrieves the NodeCache from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.NodeCache, error)
	NodeCacheNamespaceListerExpansion
}

// nodeCacheNamespaceLister implements the NodeCacheNamespaceLister
// interface.
type nodeCacheNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodeCaches in the indexer for a given namespace.
func (s nodeCacheNamespaceLister) List(selector labels.Selector) (ret []*v1.NodeCache, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodeCache))
	})
	return ret, err
}

// Get retrieves the NodeCache from the indexer for a given namespace and name.
func (s nodeCacheNamespaceLister) Get(name string) (*v1.NodeCache, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("nodecache"), name)
	}
	return obj.(*v1.NodeCache), nil
}
